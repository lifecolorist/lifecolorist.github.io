<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LifeColorist</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lifecolorist.github.io/"/>
  <updated>2018-01-20T10:11:31.516Z</updated>
  <id>https://lifecolorist.github.io/</id>
  
  <author>
    <name>lifecolorist</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>零宽断言</title>
    <link href="https://lifecolorist.github.io/posts/17457/"/>
    <id>https://lifecolorist.github.io/posts/17457/</id>
    <published>2017-07-26T10:01:47.000Z</published>
    <updated>2018-01-20T10:11:31.516Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo Next 主题优化</title>
    <link href="https://lifecolorist.github.io/posts/42368/"/>
    <id>https://lifecolorist.github.io/posts/42368/</id>
    <published>2017-07-16T10:38:20.000Z</published>
    <updated>2018-01-20T10:11:31.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优化项"><a href="#优化项" class="headerlink" title="优化项"></a>优化项</h1><ol><li>主页头像切换为圆形</li><li>页面顶部增加阅读进度</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://isudox.com/2016/07/14/customize-hexo-theme/" target="_blank" rel="noopener">Hexo 主题美化</a><br><a href="http://www.vitah.net/posts/20f300cc/" target="_blank" rel="noopener">Hexo Next主题设置和优化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;优化项&quot;&gt;&lt;a href=&quot;#优化项&quot; class=&quot;headerlink&quot; title=&quot;优化项&quot;&gt;&lt;/a&gt;优化项&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;主页头像切换为圆形&lt;/li&gt;
&lt;li&gt;页面顶部增加阅读进度&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;参考链接&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c++容器迭代器失效分析</title>
    <link href="https://lifecolorist.github.io/posts/3244/"/>
    <id>https://lifecolorist.github.io/posts/3244/</id>
    <published>2016-03-24T09:06:07.000Z</published>
    <updated>2018-01-20T10:11:31.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么情况算失效"><a href="#什么情况算失效" class="headerlink" title="什么情况算失效"></a>什么情况算失效</h1><p>当迭代器指向的元素与插入或删除操作之前的元素不同时，就认为该迭代器失效。<br>具体的原因有两种:</p><ul><li>由于插入/删除操作做成容器内存重新分配</li><li>原有的迭代器指向了与操作之前不同的元素</li></ul><p>指针和引用指向的都是某个内存位置的元素，所以当原来指向的内存位置的值发生变化，就会失效<br><a id="more"></a></p><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p>首先分析一下 vector 的迭代器：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Alloc=alloc&gt;</span><br><span class="line">class <span class="built_in">vector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* iterator;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>由此可以知道，vector 的迭代器就是指针<br>如果插入后内存发生重新分配，则所有的迭代器、引用和指针都失效。<br>如果内存没有重新分配，则：</p><ol><li>插入/删除操作后，插入点之前的元素并不受影响，所以其迭代器，引用和指针仍然有效</li><li>插入点之后的元素位置发生变化，所以插入点之后元素的迭代器，引用和指针都会失效</li><li>插入/删除元素后，尾后迭代器失效</li></ol><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">class</span> <span class="title">Ref</span>,<span class="title">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">list_iterator</span> &#123;</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">typedef</span> __list_node&lt;T&gt;* link_type;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Alloc=alloc&gt;</span><br><span class="line">class <span class="built_in">list</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">typedef</span> __list_node&lt;T&gt; list_node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> list_node* link_type;</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> (link_type)((*node).next); &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> node;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    link_type node;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除了插入/删除点之外，容器其他位置的迭代器（包括尾后迭代器和首前迭代器）、引用和指针仍然有效</p><h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Alloc=alloc&gt;</span><br><span class="line">struct __deque_iterator &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">typedef</span> T** map_pointer;</span><br><span class="line">    </span><br><span class="line">    T* cur;</span><br><span class="line">    T* first;</span><br><span class="line">    T* last;</span><br><span class="line">    map_pointer node;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>插入<ul><li>插入到除首尾位置之外的任何位置都会导致迭代器、指针和引用失效 —— <em>插入会导致插入点之前或插入点之后的元素发生移动，根据插入点之前的元素个数和插入点之后的元素个数来确定移动之前还是之后的元素</em></li><li>如果在首尾位置添加元素，迭代器会失效，但指向存在元素的引用和指针不会失效 —— <em>因为插入可能导致重新分配 map，迭代器发生变化</em></li></ul></li><li>删除：<ul><li>首尾位置之外的任何位置删除元素都会导致迭代器、指针和引用失效。—— <em>根据删除点之前和之后的元素个数不同移动之前或之后的元素</em></li><li>如果删除尾元素，则尾后迭代器失效，但其他迭代器、引用和指针不受影响；如果删除首元素，则其他迭代器、引用和指针也不受影响。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么情况算失效&quot;&gt;&lt;a href=&quot;#什么情况算失效&quot; class=&quot;headerlink&quot; title=&quot;什么情况算失效&quot;&gt;&lt;/a&gt;什么情况算失效&lt;/h1&gt;&lt;p&gt;当迭代器指向的元素与插入或删除操作之前的元素不同时，就认为该迭代器失效。&lt;br&gt;具体的原因有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于插入/删除操作做成容器内存重新分配&lt;/li&gt;
&lt;li&gt;原有的迭代器指向了与操作之前不同的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指针和引用指向的都是某个内存位置的元素，所以当原来指向的内存位置的值发生变化，就会失效&lt;br&gt;
    
    </summary>
    
      <category term="学习心得" scheme="https://lifecolorist.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="cpp" scheme="https://lifecolorist.github.io/tags/cpp/"/>
    
      <category term="stl" scheme="https://lifecolorist.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>自己编写more</title>
    <link href="https://lifecolorist.github.io/posts/27287/"/>
    <id>https://lifecolorist.github.io/posts/27287/</id>
    <published>2016-03-24T05:18:16.000Z</published>
    <updated>2018-01-20T10:11:31.521Z</updated>
    
    <content type="html"><![CDATA[<p>more命令可以实现的功能是很丰富的，包括模式查找。今天我们只是实现它的一个基本功能：</p><ol><li>more  文件列表</li><li>在屏幕正文显示已读的百分比</li><li>按下回车显示下一行</li><li>按下空格显示下一屏</li><li>按下q退出</li><li>按回车、空格、q时没有回显<a id="more"></a></li></ol><h2 id="这里有几个问题："><a href="#这里有几个问题：" class="headerlink" title="这里有几个问题："></a>这里有几个问题：</h2><ol><li><p>要在屏幕正文显示已读的百分比，那我们必须先获取文件列表中各个文件的长度，这个可以使用系统调用lstat</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> *<span class="title">buf</span>;</span></span><br><span class="line">    lstat(<span class="string">"filename"</span>,buf) <span class="comment">//获取文件状态</span></span><br><span class="line">    filesize+=buf-&gt;st_size; <span class="comment">//获取文件大小</span></span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 要显示整屏内容，我们就需要知道一屏可以显示多少行，然后从文件中读出这么多行显示在屏幕上。</span><br><span class="line"></span><br><span class="line">    ```c</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;termios.h&gt;</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> *<span class="title">ws</span>;</span></span><br><span class="line">    ws=(struct winsize*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct winsize));</span><br><span class="line">    <span class="built_in">memset</span>(ws,<span class="number">0x00</span>,<span class="keyword">sizeof</span>(struct winsize));</span><br><span class="line">    ioctl(STDIN_FILENO,TIOCGWINSZ,ws);</span><br><span class="line">    <span class="keyword">int</span> width=ws-&gt;ws_col;</span><br><span class="line">    <span class="keyword">int</span> height=ws-&gt;ws_row;</span><br></pre></td></tr></table></figure></li><li><p>禁用回显</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">ts</span>;</span> <span class="comment">//终端属性</span></span><br><span class="line">tcgetattr(STDIN_FILENO,&amp;ts); <span class="comment">//获取终端属性 </span></span><br><span class="line">ts.c_lflag &amp;= (~ECHO); <span class="comment">//阻止回显</span></span><br><span class="line">tcsetattr(STDIN_FILENO,TCSAFLUSH,&amp;ts); <span class="comment">//设置终端的新属性</span></span><br></pre></td></tr></table></figure></li></ol><p><em>备注：如果要开启回显，可以用ts.c_lflag |= ECHO;</em></p><ol><li><p>从终端读取单个字符后立即返回，不需要按回车</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">ts</span>;</span> <span class="comment">//终端属性</span></span><br><span class="line">tcgetattr(STDIN_FILENO,&amp;ts); <span class="comment">//获取终端属性 </span></span><br><span class="line">ts.c_lflag &amp;= (~ICANON); <span class="comment">//设置终端为非标准模式，在非标准模式下终端驱动程序没有缓冲区，输入立即交换程序处理</span></span><br><span class="line">ts.c_cc[VMIN]=<span class="number">1</span>; <span class="comment">//VMIN的值告诉驱动程序一次可以读取多少个字符。如果想一次读取3个字符就设为3</span></span><br><span class="line">ts.c_cc[VTIME]=<span class="number">0</span>;　　<span class="comment">//VTIME设置超时</span></span><br><span class="line">tcsetattr(STDIN_FILENO,TCSAFLUSH,&amp;ts); <span class="comment">//设置终端的新属性</span></span><br></pre></td></tr></table></figure></li></ol><ol><li>通过管道传递参数，必须将输入与键盘输入分开<br> 通过 <code>/dev/tty</code> 读取键盘输入</li></ol><p>备注：<br>终端有三种模式：</p><p>　　规范模式：驱动程序输入的字符保存在缓冲区中，仅在接收到Enter键后才发送给程序，在此之前支持对输入的编辑。</p><p>　　非规范模式：没有缓冲区，输入一个字母就立即交给程序。</p><p>　　raw模式：每个处理步骤都被一个独立的位控制。例如，ISIG位控制Ctrl-C键是否用于终止一个程序。程序可以随意地关闭这些处理步骤。</p><p>默认情况下打开的文件都处于阻塞模式，当调用getchar()时如果用户一直不输入，程序就会一直等待。使用fcntl或open文件时可以为文件描述符指定非阻塞模式O_NDELAY或O_NONBLOCK。关闭文件描述符的阻塞状态并调用read，如果没有输入字符，read就返回0。</p><p>终端驱动程序不仅是一行一行地缓冲输入，而且是一行一行有缓冲输出。可以调用fflush(stdout)强制缓冲输出。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gettermsize</span><span class="params">(<span class="keyword">int</span> *w,<span class="keyword">int</span> *h)</span></span>;     <span class="comment">//获取终端尺寸</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_more</span><span class="params">(FILE *)</span></span>;   <span class="comment">//根据see_more获取的用户输入，显示更多的文件内容或退出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">see_more</span><span class="params">()</span></span>;   <span class="comment">//捕获用户的输入指令</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settermattr</span><span class="params">()</span></span>;    <span class="comment">//设置终端属性</span></span><br><span class="line"><span class="keyword">int</span> width;      <span class="comment">//终端屏幕宽度</span></span><br><span class="line"><span class="keyword">int</span> height;     <span class="comment">//终端屏幕高度</span></span><br><span class="line"><span class="keyword">int</span> filesize;   <span class="comment">//文件的大小</span></span><br><span class="line"><span class="keyword">int</span> readsize;   <span class="comment">//已经显示的内容长度</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">ts</span>,<span class="title">ots</span>;</span>     <span class="comment">//终端属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    gettermsize(&amp;width,&amp;height);</span><br><span class="line">    settermattr();</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> *<span class="title">buf</span>;</span></span><br><span class="line">    filesize=<span class="number">0</span>;</span><br><span class="line">    readsize=<span class="number">0</span>;</span><br><span class="line">    buf=(struct stat*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct stat));</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0x00</span>,<span class="keyword">sizeof</span>(struct stat));</span><br><span class="line">    <span class="keyword">if</span>(argc==<span class="number">1</span>)     <span class="comment">//如果没有指定文件，则从标准输入读取内容</span></span><br><span class="line">        do_more(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;        <span class="comment">//从文件列表中读取内容</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;argc;i++)&#123;       <span class="comment">//more命令后面可能跟多个文件</span></span><br><span class="line">            <span class="keyword">if</span>((fp=fopen(*(argv+i),<span class="string">"r"</span>))!=<span class="number">0</span>)&#123;     <span class="comment">//以只读形式打开文件</span></span><br><span class="line">                <span class="keyword">if</span>(lstat((<span class="keyword">const</span> <span class="keyword">char</span>*)*(argv+i),buf)==<span class="number">0</span>)&#123;   <span class="comment">//获取文件状态</span></span><br><span class="line">                    filesize+=buf-&gt;st_size;     <span class="comment">//获取文件大小</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"fs=%lld\n"</span>,buf-&gt;st_size);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fclose(fp);      <span class="comment">//关闭文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;        <span class="comment">//打开文件失败,退出程序</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"size=%d\n"</span>,filesize);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;argc;i++)&#123;       <span class="comment">//more命令后面可能跟多个文件</span></span><br><span class="line">            <span class="keyword">if</span>((fp=fopen(*(argv+i),<span class="string">"r"</span>))!=<span class="number">0</span>)&#123;     <span class="comment">//以只读形式打开文件</span></span><br><span class="line">                do_more(fp);        <span class="comment">//显示文件内容</span></span><br><span class="line">                fclose(fp);      <span class="comment">//关闭文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;        <span class="comment">//打开文件失败,退出程序</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tcsetattr(STDIN_FILENO,TCSANOW,&amp;ots);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gettermsize</span><span class="params">(<span class="keyword">int</span> *w,<span class="keyword">int</span> *h)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> *<span class="title">ws</span>;</span></span><br><span class="line">    ws=(struct winsize*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct winsize));</span><br><span class="line">    <span class="built_in">memset</span>(ws,<span class="number">0x00</span>,<span class="keyword">sizeof</span>(struct winsize));</span><br><span class="line">    ioctl(STDIN_FILENO,TIOCGWINSZ,ws);</span><br><span class="line">    *w=ws-&gt;ws_col;</span><br><span class="line">    *h=ws-&gt;ws_row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settermattr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tcgetattr(STDIN_FILENO,&amp;ts);    <span class="comment">//获取终端属性 </span></span><br><span class="line">    ots=ts;         <span class="comment">//备份终端属性</span></span><br><span class="line">    ts.c_lflag &amp;= (~ECHO);    <span class="comment">//阻止回显</span></span><br><span class="line">    ts.c_lflag &amp;= (~ICANON);    <span class="comment">//设置终端为非标准模式</span></span><br><span class="line">    ts.c_cc[VMIN]=<span class="number">1</span>;        <span class="comment">//这两行当需要从终端获取字符时立即返回，不需要按回车键</span></span><br><span class="line">    ts.c_cc[VTIME]=<span class="number">0</span>;</span><br><span class="line">    tcsetattr(STDIN_FILENO,TCSAFLUSH,&amp;ts);    <span class="comment">//设置终端的新属性。TCSAFLUSH表示输出队列空了以后才生效，生效之前的输出队列被flush</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_more</span><span class="params">(FILE *fp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> linesize=width;</span><br><span class="line">    <span class="keyword">char</span> line[linesize];</span><br><span class="line">    <span class="keyword">int</span> num_of_lines=<span class="number">0</span>;     <span class="comment">//记录本次读了多少行</span></span><br><span class="line">    <span class="keyword">int</span> reply;      <span class="comment">//记录see_more()的返回值</span></span><br><span class="line">    FILE *fp_tty;</span><br><span class="line">    fp_tty=fopen(<span class="string">"/dev/tty"</span>,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp_tty==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(fgets(line,linesize,fp))&#123;    <span class="comment">//从文件中读取一行内容</span></span><br><span class="line">        readsize+=<span class="built_in">strlen</span>(line);     <span class="comment">//读出的内容长度</span></span><br><span class="line">        <span class="keyword">if</span>(num_of_lines==height)&#123;   <span class="comment">//如果满屏了</span></span><br><span class="line">            reply=see_more(); <span class="comment">//从键盘获取用户输入的命令</span></span><br><span class="line">            <span class="keyword">if</span>(reply==<span class="number">0</span>)&#123;        <span class="comment">//用户不需要显示更多内容了，要退出</span></span><br><span class="line">                tcsetattr(STDIN_FILENO,TCSANOW,&amp;ots);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            num_of_lines-=reply;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fputs</span>(line,<span class="built_in">stdout</span>)==EOF)&#123; <span class="comment">//把这行内容显示在用户屏幕上</span></span><br><span class="line">            tcsetattr(STDIN_FILENO,TCSANOW,&amp;ots);        <span class="comment">//TCSANOW表示修改立即生效</span></span><br><span class="line">            perror(<span class="string">"fputs"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num_of_lines++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">see_more</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\033[s"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\033[7m--more--(%2.0f%%)\033[m"</span>,(<span class="keyword">double</span>)readsize/filesize*<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">while</span>((c=getc(<span class="built_in">stdin</span>))!=EOF)&#123;            <span class="comment">//注意加括号，赋值操作符是右结合的。如果不加括号会把getchar()!=EOF的结果赋给c</span></span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'q'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">' '</span>)   &#123;   <span class="comment">//空格</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\033[u\033[K\033[u"</span>);</span><br><span class="line">            <span class="keyword">return</span> height;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'\n'</span>)   &#123;  <span class="comment">//回车</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\033[u\033[K\033[u"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;more命令可以实现的功能是很丰富的，包括模式查找。今天我们只是实现它的一个基本功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;more  文件列表&lt;/li&gt;
&lt;li&gt;在屏幕正文显示已读的百分比&lt;/li&gt;
&lt;li&gt;按下回车显示下一行&lt;/li&gt;
&lt;li&gt;按下空格显示下一屏&lt;/li&gt;
&lt;li&gt;按下q退出&lt;/li&gt;
&lt;li&gt;按回车、空格、q时没有回显
    
    </summary>
    
      <category term="学习心得" scheme="https://lifecolorist.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="linux" scheme="https://lifecolorist.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
